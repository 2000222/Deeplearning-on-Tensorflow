import tensorflow as tf 
import numpy as np 
def add_layer(inputs,in_size,out_size,activation_function= None):
    # add one more layer and return the outputs of this layer 
    with tf.name_scope('layer'):
      with tf.name_scope('weights'):  
        Weights = tf.Variable(tf.random_normal([in_size,out_size]))
      with tf.name_scope('biases'):  
        biases = tf.Variable(tf.zeros([1,out_size])+0.1)
      with tf.name_scope('Wx_plus_b'): 
        Wx_plus_b = tf.matmul(tf.cast(inputs,tf.float32),Weights)+biases
      if activation_function is None:
         outputs = Wx_plus_b
      else:
         outputs = activation_function(Wx_plus_b)
      return outputs
x_data = np.linspace(-1,1,300)[:,np.newaxis]
noise = np.random.normal(0,0.05,x_data.shape)
y_data = np.square(x_data)-0.5+noise

#hold the number
with tf.name_scope('inputs'): 
 xs=tf.placeholder(tf.float32,[None,1],name ='x_input')
 ys =tf.placeholder(tf.float32,[None,1],name ='y_input')
#build the first layer 
l1 = add_layer(x_data,1,10,activation_function = tf.nn.relu)
prediction = add_layer(l1,10,1,activation_function = None)

# the error between predcition and real data
with tf.name_scope('loss'):  
 loss =tf.reduce_mean(tf.reduce_sum(tf.square(y_data - prediction),
                     reduction_indices=[1]))
with tf.name_scope('train'):  
 train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)

sess = tf.Session()
writer = tf.summary.FileWriter('C:/Users/dell/',sess.graph)
# essential step 
sess.run(tf.global_variables_initializer())
